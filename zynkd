#!/usr/bin/env python2

# Licensed under GNU General Public License v3 or later
# Written by Sebastian Lohff (seba@someserver.de)
# http://seba-geek.de

from __future__ import print_function

import socket
import ssl
import select
import threading
import argparse
import random
import subprocess
import tempfile
import json
import fcntl
import hashlib
import os
import time
import re
import sys
import base64

__VERSION__ = "0.1"
DEFAULT_PORT = 9923

class RClient(threading.Thread):
	password = None
	certpath = None
	keypath = None
	sslMethod = None
	verbose = False
	debug = False

	def __init__(self, sock, addr):
		threading.Thread.__init__(self)

		self._sock = sock
		self._addr = addr
		self._done = True

		self._dataSent = 0
		self._dataRecvd = 0

	def run(self):
		if self.verbose:
			print(" --> Starting thread for %s:%s" % (self._addr))

		try:
			self._talkToClient()
		except Exception as e:
			print(" -- Error with client %s:%s:" % self._addr, e, file=sys.stderr)
		finally:
			try:
				self._sock.close()
			except:
				pass
			if self.verbose:
				print(" >> Client %s:%s disconnected" % (self._addr))
			self._done = True

	def _readline(self, maxChars):
		data = ""
		for i in range(maxChars):
			c = self._sslSock.recv(1)
			data += c
			if c == '\n':
				break

		return data.strip()

	def _talkToClient(self):

		# do ssl handshake
		sslSock = ssl.wrap_socket(self._sock, certfile=self.certpath, keyfile=self.keypath, server_side=True, ssl_version=self.sslMethod)
		self._sslSock = sslSock

		# ask for / check password
		if self.debug:
			print(" --> Sending password challenge")
		sslSock.send("50 Password please!\n")
		password = self._readline(256)
		if password != self.password:
			print(" --> Client %s:%s: invalid password" % self._addr)
			sslSock.send("51 Invalid password\n")
			sslSock.close()
			return

		# ask for / check rsync command
		sslSock.send("20 OK, send command\n")
		cmd = self._readline(2048)
		cmdlist = None
		try:
			cmdlist = json.loads(cmd.strip())

			# ensure command is a list
			if type(cmdlist) != list:
				raise ValueError()

			# make sure everything in the list is a string
			cmdlist = [str(l) for l in cmdlist]

			# commands needs to have at least one argument
			if len(cmdlist) < 2:
				raise ValueError()
		except:
			print(" --> Client %s:%s send garbage command!" % self._addr)
			sslSock.send("52 Could not parse json command\n")
			sslSock.close()
			return

		if cmdlist[0] != "rsync":
			print(" --> Client %s:%s: Invalid command (should be rsync ..., was" % self._addr, repr(" ".join(cmdlist)))
			sslSock.send("53 The command should be 'rsync', not anything else\n")
			sslSock.close()
			return

		# now we can start rsync
		sslSock.send("20 OK, switching to rsync\n")
		if self.verbose:
			print(" --> Running", repr(" ".join(cmdlist)))

		proc = subprocess.Popen(cmdlist, stdin=subprocess.PIPE, stdout=subprocess.PIPE)

		# make stdout of rsync nonblocking
		pstdfd = proc.stdout.fileno()
		fl = fcntl.fcntl(pstdfd, fcntl.F_GETFL)
		fcntl.fcntl(pstdfd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

		sslSock.setblocking(0)
		quit = False
		while proc.poll() == None and not quit:
			if self.debug:
				print(" ?? selecting for %s:%s" % self._addr)
			(socks, _, _) = select.select([proc.stdout, sslSock], [], [])
			if self.debug:
				print(" -->", socks)
			for sock in socks:
				if sock == proc.stdout:
					data = proc.stdout.read()
					if self.debug:
						print(" ==> Sending data to socket", repr(data))
					if data == '':
						quit = True
						break
					sslSock.sendall(data)
				elif sock == sslSock:
					data = sslSock.recv(4096)
					if self.debug:
						print(" <== Sending data to process", repr(data))
					if data == '':
						quit = True
						break
					proc.stdin.write(data)
					proc.stdin.flush()

		proc.wait()
		sslSock.close()

def _parser():
	parser = argparse.ArgumentParser(prog="zynkd")
	parser.add_argument("-p", "--port", default=DEFAULT_PORT, type=int, help="Port to listen on for zynk connections.")
	parser.add_argument("-P", "--password", default=None, type=str, help="Password to use for authenticating clients. If not specified, one will be generated for you.")

	parser.add_argument('-o', '--snakeoil', default=False, action="store_true", help="Use snakeoil certificates, often present on the system")

	parser.add_argument('-k', '--key', default=None, type=str, help="Keyfile to use for SSL. If no cert is given with --cert the keyfile will also be searched for a cert")
	parser.add_argument('-c', '--cert', default=None, type=str, help="Certfile to use for SSL")
	parser.add_argument('-v', '--verbose', default=False, action="store_true", help="Be more verbose")
	parser.add_argument('-d', '--debug', default=False, action="store_true", help="Be more 'debug level' verbose")
	parser.add_argument('--version', action='version', version='%(prog)s ' + __VERSION__)

	return parser

def createTemp():
	path = tempfile.mktemp(prefix="zynkcert-", suffix=".pem")
	f = file(path, "w")
	f.close()
	os.chmod(path, 0700)

	return path

def genCert(certpath, keypath):
	# try openssl
	opensslPath = ''
	try:
		opensslPath = subprocess.check_output(["which", "openssl"]).strip()
	except subprocess.CalledProcessError:
		opensslPath = ''

	if opensslPath:
		# we can use openssl
		print("Generating certificate using openssl...")
		# openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 3650 -nodes -subj '/C=DE/ST=Berlin/L=Berlin/O=Testorg/OU=Networks/CN=XXXXXXXXXXXXX'
		cmd = ['openssl', 'req', '-x509', '-newkey', 'rsa:2048', '-keyout', keypath, '-out', certpath, '-days', '3650', '-nodes', '-subj', "/C=DE/ST=Berlin/L=Berlin/O=Seba/OU=zynkd/CN=zynkhost"]
		ret = subprocess.call(cmd)
		if ret != 0:
			print("Certificate generation failed, OpenSSL returned %d (cmd was: %s)" % (ret, " ".join(cmd)))
	else:
		havePySSL = False
		try:
			import OpenSSL
			OpenSSL
			havePySSL = True
		except ImportError:
			pass

		if havePySSL:
			# we can use OpenSSL python bindings
			print("Generating certificate using openssl python bindings...")
			pkey = OpenSSL.crypto.PKey()
			pkey.generate_key(OpenSSL.crypto.TYPE_RSA, 2048)

			req = OpenSSL.crypto.X509Req()
			subj = req.get_subject()
			subj.C = "DE"
			subj.ST = "Berlin"
			subj.L = "Berlin"
			subj.O = "Seba"
			subj.OU = "zynkd"
			subj.CN = "zynkhost"

			req.set_pubkey(pkey)
			req.sign(pkey, "sha1")

			cert = OpenSSL.crypto.X509()
			cert.set_serial_number(int(time.time()))
			cert.gmtime_adj_notBefore(0)
			cert.gmtime_adj_notAfter(365*24*60*60)
			cert.set_issuer(req.get_subject())
			cert.set_subject(req.get_subject())
			cert.set_pubkey(req.get_pubkey())
			cert.sign(pkey, "sha1")

			f = open(certpath, "w")
			f.write(OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, cert))
			f.close()

			f = open(keypath, "w")
			f.write(OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, pkey))
			f.close()

		else:
			# no cert generation possible. inform user about install options + pregenerated certs (specify own or snakeoil)
			print("Error: No certficate found and no method to generate one is available")
			print("       Your options for crypto are:")
			print()
			print("       - specify a certificate/key with --cert/--key")
			print("       - install openssl (the cli tool)")
			print("       - install python-openssl")
			print("       - use pregenerated snakeoil certificates, if present (--snakeoil)")

			sys.exit(1)

def getPemFingerprint(certpath):
	cert = open(certpath, "r").read()

	m = re.search("^-----BEGIN CERTIFICATE-----\n(?P<cert>.*?)\n-----END CERTIFICATE-----", cert, re.DOTALL | re.MULTILINE)
	if not m:
		print("Could not find BEGIN CERTIFICATE in %s, quitting" % certpath)
		sys.exit(1)

	certdata = base64.b64decode(m.group(1))

	certPrint = hashlib.sha1()
	certPrint.update(certdata)
	certPrintHex = certPrint.hexdigest()
	certPrintStr = ":".join([certPrintHex[2*i:2*i+2].upper() for i in range(len(certPrintHex) / 2)])

	b64print = base64.b64encode(certPrint.digest())

	return certPrintStr, b64print

def getIPs(listenIPv4=True, listenIPv6=True):
	""" Get IPs from all interfaces via ip or ifconfig. """
	# ip and ifconfig sometimes are located in /sbin/
	os.environ['PATH'] += ':/sbin:/usr/sbin'
	proc = subprocess.Popen(r"ip addr|" + \
				             "sed -n -e 's/.*inet6\{0,1\} \([0-9.a-fA-F:]\+\).*/\\1/ p'|" + \
				             "grep -v '^fe80\|^127.0.0.1\|^::1'", \
				             shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	if proc.wait() != 0:
		# ip failed somehow, falling back to ifconfig
		oldLang = os.environ.get("LC_ALL", None)
		os.environ['LC_ALL'] = "C"
		proc = subprocess.Popen(r"ifconfig|" + \
					             "sed -n 's/.*inet6\{0,1\}\( addr:\)\{0,1\} \{0,1\}\([0-9a-fA-F.:]*\).*/" + \
					             "\\2/p'|" + \
					             "grep -v '^fe80\|^127.0.0.1\|^::1'", \
					             shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		if oldLang:
			os.environ['LC_ALL'] = oldLang
		else:
			del(os.environ['LC_ALL'])
		if proc.wait() != 0:
			# we couldn't find any ip address
			proc = None
	if proc:
		ips = proc.stdout.read().strip().split("\n")

		# filter out ips we are not listening on
		if not listenIPv6:
			ips = filter(lambda ip: ":" not in ip, ips)
		if not listenIPv4:
			ips = filter(lambda ip: "." not in ip, ips)

		return ips
	return None


def main():
	# parse args
	parser = _parser()
	args = parser.parse_args()

	if args.cert and not args.key:
		parser.error("You cannot specify a --cert without a --key. See --help for more information")

	# select ssl version
	if hasattr(ssl, "PROTOCOL_TLSv1_2"):
		RClient.sslMethod = ssl.PROTOCOL_TLSv1_2
	elif hasattr(ssl, "PROTOCOL_TLSv1"):
		RClient.sslMethod = ssl.PROTOCOL_TLSv1
	else:
		# only SSLv23 available
		print("Warning: Only SSLv2/SSLv3 is available, connection might be insecure.")
		RClient.sslMethod = ssl.PROTOCOL_SSLv23

	RClient.verbose = args.verbose
	if args.debug:
		RClient.verbose = RClient.debug = True

	# get a password
	password = None
	if args.password:
		password = args.password
	else:
		chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.,-"
		password = "".join([random.choice(chars) for i in range(20)])

	RClient.password = password

	certpath = None
	keypath = None
	certsGenerated = False

	# big try with finally statement to ensure that tempfiles are deleted
	try:
		if args.key:
			keypath = args.keypath
			if args.cert:
				certpath = args.certpath
			else:
				certpath = args.keypath
		elif args.snakeoil:
			certpath = "/etc/ssl/certs/ssl-cert-snakeoil.pem"
			keypath = "/etc/ssl/private/ssl-cert-snakeoil.key"
		else:
			# generate some certs
			certsGenerated = True

			certpath = createTemp()
			keypath = createTemp()

			genCert(certpath, keypath)

		RClient.certpath = certpath
		RClient.keypath = keypath

		## get fingerprint of cert
		fingerprintSHA1, fingerprintb64 = getPemFingerprint(certpath)

		srv = socket.socket()
		srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
		port = args.port
		srv.bind(("", port))
		srv.listen(2)

		clients = []

		# print information about server
		print("Zynk %s started" % __VERSION__)
		print("    Port:               ", port)
		print("    Fingerprint SHA1:   ", fingerprintSHA1)
		print("    Fingerprint base64: ", fingerprintb64)
		print("    Password:           ", password)
		print()

		# print hosts / ip addresses
		targets = [socket.getfqdn()] + getIPs()
		portExtra = ""
		if args.port != DEFAULT_PORT:
			portExtra = "--zp %d" % args.port
		for target in targets:
			print("    zynk %s--zf %s --zpw %s --zh %s " % (portExtra, fingerprintb64, password, target)) 

		print()
		print("    Note: With --zh you can specify your remote just as remote:")
		print()

		# run server
		quit = False
		while not quit:
			(socks, _, _) = select.select([srv], [], [], None)

			if srv in socks:
				sock, addr = srv.accept()
				print(" >> %s:%s connected to server" % addr)

				client = RClient(sock, addr)
				clients.append(client)

				client.start()
	except KeyboardInterrupt:
		print("Thank you for uzing zynk. Guten Tag.")
	finally:
		# delete certificates, if autogenerated
		if certsGenerated:
			if args.verbose:
				print("Cleaning up certs")
			for f in (certpath, keypath):
				if args.verbose:
					print(" --> Deleting", f)
				if f and os.path.exists(f):
					os.unlink(f)

if __name__ == '__main__':
	main()
