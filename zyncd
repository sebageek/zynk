#!/usr/bin/env python2
from __future__ import print_function

import socket
import ssl
import select
import threading
import argparse
import random
import subprocess
import json
import fcntl
import os

# FIXME certificate generation (python-openssl  / clitool?)
# FIXME path stuff for rsync?
# FIXME clean up code, prints, etc.
# FIXME use better ssl versions

class RClient(threading.Thread):
	password = None

	def __init__(self, sock, addr):
		threading.Thread.__init__(self)

		self._sock = sock
		self._addr = addr
		self._done = True

	def run(self):
		print("Starting %s:%s" % (self._addr))

		try:
			self._talkToClient()
		except Exception as e:
			print(e)
		finally:
			try:
				self._sock.close()
			except:
				pass
			print("Done with %s:%s" % (self._addr))
			self._done = True

	def _readline(self, maxChars):
		data = ""
		for i in range(maxChars):
			c = self._sslSock.recv(1)
			data += c
			if c == '\n':
				break

		return data.strip()

	def _talkToClient(self):
		sslSock = ssl.wrap_socket(self._sock, certfile="cert.pem", keyfile="key.pem", server_side=True, ssl_version=ssl.PROTOCOL_SSLv23)
		self._sslSock = sslSock

		sslSock.send("50 Password please!\n")
		password = self._readline(256)
		if password != self.password:
			sslSock.send("51 Invalid password\n")
			sslSock.close()
			return

		sslSock.send("20 OK, send command\n")
		cmd = self._readline(2048)
		cmdlist = None
		try:
			cmdlist = json.loads(cmd.strip())

			if type(cmdlist) != list:
				raise ValueError()

			# make sure everything is a string
			cmdlist = [str(l) for l in cmdlist]

			if len(cmdlist) < 2:
				raise ValueError()
		except:
			print("Client send garbage command")
			sslSock.send("52 Could not parse json command\n")
			sslSock.close()
			return

		if cmdlist[0] != "rsync":
			sslSock.send("53 The command should be 'rsync', not anything else\n")
			sslSock.close()
			return


		sslSock.send("20 OK, switching to rsync\n")
		print("Running", cmdlist)

		#cmdlist = ["strace"] + cmdlist
		#proc = subprocess.Popen(cmdlist, stdin=sslSock, stdout=sslSock)
		#proc = subprocess.Popen(cmdlist, stdin=f, stdout=f)

		proc = subprocess.Popen(cmdlist, stdin=subprocess.PIPE, stdout=subprocess.PIPE)

		pstdfd = proc.stdout.fileno()
		fl = fcntl.fcntl(pstdfd, fcntl.F_GETFL)
		fcntl.fcntl(pstdfd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

		quit = False
		while proc.poll() == None and not quit:
			print("selecting")
			(socks, _, _) = select.select([proc.stdout, sslSock], [], [])
			print(" -->", socks)
			for sock in socks:
				if sock == proc.stdout:
					data = proc.stdout.read()
					print("Sending data to socket", repr(data))
					if data == '':
						quit = True
						break
					sslSock.send(data)
				elif sock == sslSock:
					data = sslSock.recv(10240)
					print("Sending data to process", repr(data))
					if data == '':
						quit = True
						break
					proc.stdin.write(data)

		proc.wait()
		sslSock.close()

def _parser():
	parser = argparse.ArgumentParser(prog="zynkd")
	parser.add_argument("-p", "--port", default=2223, type=int, help="Port to listen on for zynk connections.")
	parser.add_argument("-P", "--password", default=None, type=str, help="Password to use for authenticating clients. If not specified, one will be generated for you.")

	# FIXME: use these keys ;)
	parser.add_argument('--key', default=None, type=str, help="Keyfile to use for SSL. If no cert is given with --cert the keyfile will also be searched for a cert")
	parser.add_argument('--cert', default=None, type=str, help="Certfile to use for SSL")

	return parser


def main():
	# parse args
	parser = _parser()
	args = parser.parse_args()

	# get a password
	password = None
	if args.password:
		password = args.password
	else:
		chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.,-"
		password = "".join([random.choice(chars) for i in range(20)])

	RClient.password = password

	srv = socket.socket()
	srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	port = 2223
	srv.bind(("", port))
	srv.listen(2)

	clients = []

	print("Running server on port", port)
	print("Password is: ", password)
	quit = False
	while not quit:
		(socks, _, _) = select.select([srv], [], [], None)
		
		if srv in socks:
			sock, addr = srv.accept()
			print("New client, connceting from %s:%s :)" % addr)

			client = RClient(sock, addr)
			clients.append(client)

			client.start()

if __name__ == '__main__':
	main()
